// This transform config was generated by Snaplet.
// Snaplet found fields that may contain personally identifiable information (PII)
// and used that to populate this file.
import { copycat, faker } from '@snaplet/copycat'
import type { Transform } from './structure'
export const config: Transform = () => ({
  $options: {
    mode: 'unsafe',
  },
  auth: {
    audit_log_entries({ row }) {
      return {
        ip_address: copycat.scramble(row.ip_address),
      }
    },

    identities({ row }) {
      return {
        provider: copycat.oneOf(row.provider, faker.locales.en.address.state),
      }
    },

    mfa_challenges({ row }) {
      return {
        ip_address: copycat.ipv4(row.ip_address),
      }
    },

    mfa_factors({ row }) {
      return {
        secret: copycat.streetAddress(row.secret),
      }
    },

    refresh_tokens({ row }) {
      return {
        parent: copycat.scramble(row.parent),
        token: copycat.scramble(row.token, {
          preserve: [],
        }),
      }
    },

    saml_relay_states({ row }) {
      return {
        for_email: copycat.email(row.for_email),
      }
    },

    sso_domains({ row }) {
      return {
        domain: copycat.email(row.domain),
      }
    },

    users({ row }) {
      return {
        email: copycat.email(row.email, {
          limit: 255,
        }),
        phone: copycat.scramble(row.phone),
      }
    },
  },
  public: {
    bids({ row }) {
      return {
        // bidder: copycat.uuid(row.bidder),
        // project: copycat.uuid(row.project),
      }
    },

    comments({ row }) {
      return {
        // project: copycat.uuid(row.project),
      }
    },

    profiles({ row }) {
      return {
        full_name: copycat.username(row.full_name),
        username: copycat.username(row.username),
      }
    },

    projects({ row }) {
      return {}
    },

    txns({ row }) {
      return {
        // project: copycat.uuid(row.project),
        // token: copycat.uuid(row.token),
      }
    },
  },
  storage: {
    buckets({ row }) {
      return {
        name: copycat.fullName(row.name),
        owner: copycat.uuid(row.owner),
      }
    },

    migrations({ row }) {
      return {
        hash: copycat.fullName(row.hash, {
          limit: 40,
        }),
        name: copycat.fullName(row.name, {
          limit: 100,
        }),
      }
    },

    objects({ row }) {
      return {
        name: copycat.fullName(row.name),
        owner: copycat.uuid(row.owner),
      }
    },
  },
  pgsodium: {
    key({ row }) {
      return {
        name: copycat.fullName(row.name),
        user_data: copycat.username(row.user_data),
      }
    },
  },
})

export const subset = {
  enabled: true,
  version: '2', // the latest version
  targets: [
    {
      table: 'auth.audit_log_entries',
      percent: 1,
    },
  ],
  keepDisconnectedTables: true,
}
